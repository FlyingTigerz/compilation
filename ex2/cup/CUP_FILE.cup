/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal NIL;
terminal TIMES;
terminal PLUS;
terminal MINUS;
terminal DIVIDE;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;
terminal TYPE_INT;
terminal TYPE_VOID;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal NEW;
terminal TYPE_STRING;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;
/*****************/
/* NON TERMINALS */
/*****************/

non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;

non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_ARRAYTYPEDEF arrayTypedef;
non terminal AST_VARDEC varDec;
non terminal AST_FUNCDEC funcDec;
non terminal AST_CLASSDEC classDec;
non terminal AST_NEWEXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_BINOP BINOP;

non terminal AST_STMT_LIST stmtlist;
non terminal AST_CFIELD_LIST cfieldlist;
non terminal AST_VAR_LIST varlist;
non terminal AST_EXP_LIST explist;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left LT;
precedence left GT;
precedence left EQ;
/************************/
/* START WITH: stmtList */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

Program			::= 		dec:d						{: RESULT = new AST_PROGRAM(d, null);       :}
					| dec:d Program:p				{: RESULT = new AST_PROGRAM(d, p);       :}	
					;
dec 			::= 		varDec:vd 					{: RESULT = new AST_DEC(vd, null, null, null);       :}
					| funcDec:fd					{: RESULT = new AST_DEC(null, fd, null, null);       :}
					|classDec:cd					{: RESULT = new AST_DEC(null, null, cd, null);       :}
					|arrayTypedef:atd				{: RESULT = new AST_DEC(null, null, null, atd);       :}
					;
type			::=		TYPE_INT					{: RESULT = new AST_TYPE("type_int");       :}
					| TYPE_VOID					{: RESULT = new AST_TYPE("type_void");       :}
					| TYPE_STRING					{: RESULT = new AST_TYPE("type_string");       :}
					| ID:name					{: RESULT = new AST_TYPE(name);      	 :}
					;

arrayTypedef		::=		ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON {: RESULT = new AST_ARRAYTYPEDEF(name,t);      	 :}
					;
varDec	 		::=		type:t ID:name SEMICOLON			  {: RESULT = new AST_VARDEC(t,null,null,name); :}
					| type:t ID:name ASSIGN exp:e SEMICOLON		{: RESULT = new AST_VARDEC(t,e,null,name);     :}
					| type:t ID:name ASSIGN newExp:ne SEMICOLON	{: RESULT = new AST_VARDEC(t,null,ne,name);:}
					;
varlist			::= 		type:t ID:name					{: RESULT = new AST_VAR_LIST(t,name,null);     :}
					| type:t ID:name COMMA varlist:tc		{: RESULT = new AST_VAR_LIST(t,name,tc);     :}
					;
funcDec			::=		type:t ID:name LPAREN RPAREN LBRACE stmtlist:sr RBRACE {: RESULT = new AST_FUNCDEC(t,sr,null,name);     :}
					| type:t ID:name LPAREN varlist:tc RPAREN LBRACE stmtlist:sr RBRACE {: RESULT = new AST_FUNCDEC(t,sr,tc,name);     :}
					;
cfieldlist		::=		cField:cf					{: RESULT = new AST_CFIELD_LIST(cf,null);     :}
					| cField:cf cfieldlist:cfr			{: RESULT = new AST_CFIELD_LIST(cf,cfr);     :}
					;
classDec		::=		CLASS ID:name LBRACE cfieldlist:c RBRACE 		{: RESULT = new AST_CLASSDEC(name,name,c);     :}
					| CLASS ID:name1 EXTENDS ID:name2 LBRACE cfieldlist:c RBRACE{: RESULT = new AST_CLASSDEC(name1,name2,c);     :}
					;
explist 		::=		exp:e COMMA explist:et 				{: RESULT = new AST_EXP_LIST(e, et);       :}
					|exp:e						{: RESULT = new AST_EXP_LIST(e, null);       :}
					;

exp			::=		var:v						{: RESULT = new AST_EXP_VAR(v);   :}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_BAREXP(e);   :}
					| exp:e1 BINOP:OP exp:e2 			{: RESULT = new AST_EXP_BINOP(e1,e2,OP.OP);   :}
					| ID:name LPAREN RPAREN				{: RESULT = new AST_EXP_ID(name);      :}
					| ID:name LPAREN explist:et RPAREN		{: RESULT = new AST_EXPLST_VAR_ID(null,et,name); 	:}
					| var:v DOT ID:name LPAREN RPAREN		{: RESULT = new AST_EXPLST_VAR_ID(v,null,name);     :}
					| var:v DOT ID:name LPAREN explist:et RPAREN  	{: RESULT = new AST_EXPLST_VAR_ID(v,et,name);       :}
					| INT:num 					{: RESULT = new AST_EXP_INT(num);       :}
					| MINUS INT:num                                 {: RESULT = new AST_EXP_INT(-num);       :}
					| NIL
					| STRING:s					{: RESULT = new AST_EXP_STRING(s);:}
					;





var			::=		ID:name						{: RESULT = new AST_VAR_SIMPLE(name);      :}
					| var:v DOT ID:name				{: RESULT = new AST_VAR_FIELD(v,name); 	    :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
stmtlist 		::= 		stmt:s						{: RESULT = new	AST_STMT_LIST(s,null); :}
					| stmt:s stmtlist:sr				{: RESULT = new	AST_STMT_LIST(s,sr); :}
					;
stmt			::= 		varDec:vd					{: RESULT = new  AST_STMT_VARDECT(vd);       :}
					| var:v  ASSIGN exp:e SEMICOLON			{: RESULT = new AST_VAR_SUBSCRIPT_NEWEXP(v,e,null);     :}
					| var:v  ASSIGN newExp:ne SEMICOLON		{: RESULT = new AST_VAR_SUBSCRIPT_NEWEXP(v,null,ne);:}
					| RETURN SEMICOLON				{: RESULT = new AST_STMT_RETURN(null);     :}
					| RETURN exp:e SEMICOLON			{: RESULT = new AST_STMT_RETURN(e);     :}
					| IF LPAREN exp:e RPAREN LBRACE stmtlist:sr RBRACE	{: RESULT = new AST_STMT_IF(e,sr);     :}
					| WHILE LPAREN exp:e RPAREN LBRACE stmtlist:sr RBRACE	{: RESULT = new AST_STMT_WHILE(e,sr);     :}
					| ID:name LPAREN RPAREN SEMICOLON	{: RESULT = new AST_STMT_FUNCCALL(name,null,null);      	 :}
					| ID:name LPAREN explist:et RPAREN SEMICOLON	{: RESULT = new AST_STMT_FUNCCALL(name,null,et);      	 :}
					| var:v DOT ID:name LPAREN RPAREN SEMICOLON	{: RESULT = new AST_STMT_FUNCCALL(name,v,null);      	 :}
					| var:v DOT ID:name LPAREN explist:et RPAREN SEMICOLON{:RESULT = new AST_STMT_FUNCCALL(name,v,et);      :}
					;


newExp                 ::=  		NEW type:t					{: RESULT = new AST_NEWEXP(t,null);   :}			
					| NEW type:t LBRACK exp:e RBRACK		{: RESULT = new AST_NEWEXP(t,e);   :}
					;
cField 			::=		varDec:vd					{: RESULT = new AST_CFIELD(vd,null);   :}
					| funcDec:fd					{: RESULT = new AST_CFIELD(null,fd);   :}
					;
BINOP			::=		PLUS						{: RESULT = new AST_BINOP(0);       :}
					| MINUS						{: RESULT = new AST_BINOP(1);       :}
					| TIMES						{: RESULT = new AST_BINOP(2);       :}
					| DIVIDE					{: RESULT = new AST_BINOP(3);       :}
					| LT						{: RESULT = new AST_BINOP(4);       :}
					| GT						{: RESULT = new AST_BINOP(5);       :}
					| EQ						{: RESULT = new AST_BINOP(6);       :}
					;



