1.	CONST_MAX_INT : 32767
2.	CONST_MIN_INT : -32768
3.	DATA_STR_CONST_SPACE :  
4.	DATA_STR_ERR_ACCESS_VIOLATION : Access Violation
5.	DATA_STR_ERR_ZERO_DIV : Illegal Division By Zero
6.	DATA_STR_ERR_INVALID_POINTER : Invalid Pointer Dereference
7.	CONST_SPACE : DATA_STR_CONST_SPACE
8.	ERR_ACCESS_VIOLATION : DATA_STR_ERR_ACCESS_VIOLATION
9.	ERR_ZERO_DIV : DATA_STR_ERR_ZERO_DIV
10.	ERR_INVALID_POINTER : DATA_STR_ERR_INVALID_POINTER
11.	jmp main
12.  FUNC_LABEL_IsPrime:
13.	$sp = addi $sp, -4
14.	0($sp) = $ra
15.	$sp = addi $sp, -4
16.	0($sp) = $fp
17.	$fp = move $sp
18.	$sp = addi $sp, -8
19.	$t0 = 2
20.	-4($fp) = $t0
21.	$t1 = 2
22.	-8($fp) = $t1
23.  WHILE_TRUE1:
24.	$t3 = -4($fp)
25.	$t4 = 0(GLOBAL_VAR_p)
26.	$t2 = lt $t3, $t4
27.	jifz $t2, WHILE_FALSE1
28.	$t5 = 2
29.	0($fp) = $t5
30.  WHILE_TRUE2:
31.	$t7 = -8($fp)
32.	$t8 = 0(GLOBAL_VAR_p)
33.	$t6 = lt $t7, $t8
34.	jifz $t6, WHILE_FALSE2
35.	$t10 = -4($fp)
36.	$t12 = -8($fp)
37.	$t13 = 0(GLOBAL_VAR_p)
38.	$t9 = mul $t10, $t11
39.	jilt $t9, -32768, UNDERFLOW_4
40.	jigt $t9, 32767, OVERFLOW_4
41.	jmp INBOUNDS_4
42.  UNDERFLOW_4:
43.	$t9 = -32768
44.	jmp INBOUNDS_4
45.  OVERFLOW_4:
46.	$t9 = 32767
47.  INBOUNDS_4:
48.	jifz $t9, IF_FALSE3
49.	$t14 = 0
50.	return $t14
51.  IF_FALSE3:
52.	$t16 = -8($fp)
53.	$t17 = 1
54.	$t15 = add $t16, $t17
55.	jilt $t15, -32768, UNDERFLOW_5
56.	jigt $t15, 32767, OVERFLOW_5
57.	jmp INBOUNDS_5
58.  UNDERFLOW_5:
59.	$t15 = -32768
60.	jmp INBOUNDS_5
61.  OVERFLOW_5:
62.	$t15 = 32767
63.  INBOUNDS_5:
64.	0($fp) = $t15
65.	jmp WHILE_TRUE2
66.  WHILE_FALSE2:
67.	$t19 = -4($fp)
68.	$t20 = 1
69.	$t18 = add $t19, $t20
70.	jilt $t18, -32768, UNDERFLOW_6
71.	jigt $t18, 32767, OVERFLOW_6
72.	jmp INBOUNDS_6
73.  UNDERFLOW_6:
74.	$t18 = -32768
75.	jmp INBOUNDS_6
76.  OVERFLOW_6:
77.	$t18 = 32767
78.  INBOUNDS_6:
79.	0($fp) = $t18
80.	jmp WHILE_TRUE1
81.  WHILE_FALSE1:
82.	$t21 = 1
83.	return $t21
84.  FUNC_LABEL_PrintPrimes:
85.	$sp = addi $sp, -4
86.	0($sp) = $ra
87.	$sp = addi $sp, -4
88.	0($sp) = $fp
89.	$fp = move $sp
90.	$sp = addi $sp, -4
91.	$t22 = 0(GLOBAL_VAR_start)
92.	-4($fp) = $t22
93.  WHILE_TRUE7:
94.	$t24 = -4($fp)
95.	$t26 = 0(GLOBAL_VAR_end)
96.	$t27 = 1
97.	$t25 = add $t26, $t27
98.	jilt $t25, -32768, UNDERFLOW_8
99.	jigt $t25, 32767, OVERFLOW_8
100.	jmp INBOUNDS_8
101.  UNDERFLOW_8:
102.	$t25 = -32768
103.	jmp INBOUNDS_8
104.  OVERFLOW_8:
105.	$t25 = 32767
106.  INBOUNDS_8:
107.	$t23 = lt $t24, $t25
108.	jifz $t23, WHILE_FALSE7
109.	$t28 = -4($fp)
110.	$t29 = call IsPrime $t28
111.	jifz $t29, IF_FALSE9
112.	$t30 = -4($fp)
113.	$t31 = call PrintInt $t30
114.  IF_FALSE9:
115.	$t33 = -4($fp)
116.	$t34 = 1
117.	$t32 = add $t33, $t34
118.	jilt $t32, -32768, UNDERFLOW_10
119.	jigt $t32, 32767, OVERFLOW_10
120.	jmp INBOUNDS_10
121.  UNDERFLOW_10:
122.	$t32 = -32768
123.	jmp INBOUNDS_10
124.  OVERFLOW_10:
125.	$t32 = 32767
126.  INBOUNDS_10:
127.	0($fp) = $t32
128.	jmp WHILE_TRUE7
129.  WHILE_FALSE7:
130.	return 
131.  FUNC_LABEL_main:
132.	$sp = addi $sp, -4
133.	0($sp) = $ra
134.	$sp = addi $sp, -4
135.	0($sp) = $fp
136.	$fp = move $sp
137.	$sp = addi $sp, 0
138.	$t35 = 2
139.	$t36 = 100
140.	$t37 = call PrintPrimes $t35, $t36
141.	return 
142.  main:
143.	jal FUNC_LABEL_main
