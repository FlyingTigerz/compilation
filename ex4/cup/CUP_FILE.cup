/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.PrintWriter;


parser code
{:
	public Lexer lexer;
	public PrintWriter file_writer;

	public Parser(Lexer lexer, PrintWriter file_writer)
	{
		super(lexer);
		this.lexer = lexer;
		this.file_writer = file_writer;
	}
	public void report_error(String message, Object info)
	{
		file_writer.print("ERROR(");
		file_writer.print(lexer.getLine());
		file_writer.print(")\n");
        file_writer.close();
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s;
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal GT;
terminal LT;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal NEW;
terminal COMMENT;
terminal INTERR;
terminal NIL;
terminal COMMA;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;




/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/

non terminal AST_PROGRAM prog;
non terminal AST_DEC_LIST decList;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_ARRAY_TYPEDEF arrayTypedef;
non terminal AST_DEC_VAR varDec;
non terminal AST_DEC_FUNC funcDec;
non terminal AST_DEC_CLASS classDec;
non terminal AST_PARAM_LIST parmList;
non terminal AST_EXP exp;
non terminal AST_EXP_LIST expList;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_NEW_EXP newExp;
non terminal AST_C_FIELD cField;
non terminal AST_C_FIELD_LIST cFieldList;
non terminal AST_BINOP BINOP;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: Program */
/************************/
start with prog;

/********************/
/* DERIVATION RULES */
/********************/

prog        ::=     decList:dL              {: RESULT = new  AST_PROGRAM((AST_DEC_LIST)dL, lexer.getLine());     :};

decList		::=		dec:d	decList:dL		{: RESULT = new AST_DEC_LIST(d,dL, lexer.getLine());	    :}
					| dec:d				    {: RESULT = new AST_DEC_LIST(d,null, lexer.getLine());   :}
					;

dec			::=		varDec:vD				{: RESULT = vD;		:}
					| funcDec:fD 			{: RESULT = fD;		:}
					| classDec:cD 			{: RESULT = cD;		:}
					| arrayTypedef:aT 		{: RESULT = aT;		:}
					;

type        ::=     TYPE_INT                {: RESULT = new AST_TYPE("int", lexer.getLine());    :}
                    | TYPE_STRING           {: RESULT = new AST_TYPE("string", lexer.getLine()); :}
                    | TYPE_VOID             {: RESULT = new AST_TYPE("void", lexer.getLine());   :}
                    | ID:name               {: RESULT = new AST_TYPE(name, lexer.getLine());     :}
                     ;

arrayTypedef::= 	ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON	{: RESULT = new AST_ARRAY_TYPEDEF(name, t, lexer.getLine());	:}
					;

varDec		::=		type:t ID:name SEMICOLON                        {: RESULT = new AST_DEC_VAR(t, name, null, null, lexer.getLine());   :}
                    | type:t ID:name ASSIGN exp:e SEMICOLON		    {: RESULT = new AST_DEC_VAR(t, name, e, null, lexer.getLine());		:}
                    | type:t ID:name ASSIGN newExp:nE SEMICOLON     {: RESULT = new AST_DEC_VAR(t, name, null, nE, lexer.getLine());  :}
                    ;

funcDec		::=		type:t ID:name LPAREN parmList:pL RPAREN LBRACE stmtList:sL RBRACE	{: RESULT = new AST_DEC_FUNC(t, name, pL, sL, lexer.getLine());	        :}
					| type:t ID:name LPAREN RPAREN LBRACE stmtList:sL RBRACE	        {: RESULT = new AST_DEC_FUNC(t, name, null, sL, lexer.getLine());	:}
					;

parmList    ::=     type:t ID:name                      {: RESULT = new AST_PARAM_LIST(t, name, null, lexer.getLine()); :}
                    | type:t ID:name COMMA parmList:pL  {: RESULT = new AST_PARAM_LIST(t, name, pL, lexer.getLine());   :}
                    ;

stmtList    ::=     stmt:s                {:  RESULT = new AST_STMT_LIST(s, null, lexer.getLine()); :}
                    | stmt:s stmtList:sL  {:  RESULT = new AST_STMT_LIST(s, sL, lexer.getLine());   :}
                    ;

classDec	::=		CLASS ID:className LBRACE cFieldList:cs RBRACE	                            {: RESULT = new AST_DEC_CLASS(className, null, cs, lexer.getLine());	        :}
                    | CLASS ID:className EXTENDS ID:extendName LBRACE cFieldList:cs RBRACE	    {: RESULT = new AST_DEC_CLASS(className, extendName, cs, lexer.getLine());	:}
					;

cFieldList  ::=     cField:c                    {: RESULT = new AST_C_FIELD_LIST(c, null, lexer.getLine());  :}
                    | cField:c cFieldList:cL    {: RESULT = new AST_C_FIELD_LIST(c, cL, lexer.getLine());    :}
                    ;

exp			::=		var:v											{: RESULT = new AST_EXP_VAR(v, lexer.getLine());		  			:}
					| LPAREN exp:e1 RPAREN 							{: RESULT = new AST_EXP_PAREN(e1, lexer.getLine());				:}
					| exp:e1 PLUS  exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, '+', e1left+1); :}
					| exp:e1 MINUS exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, '-', e1left+1); :}
					| exp:e1 TIMES exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, '*', e1left+1); :}
					| exp:e1 DIVIDE exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, '/', e1left+1); :}
					| exp:e1 LT exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, '<', e1left+1);:}
					| exp:e1 GT exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, '>', e1left+1);:}
					| exp:e1 EQ exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, '=', e1left+1);:}
					| ID:name LPAREN RPAREN							{: RESULT = new AST_EXP_FUNC(null,name,null, lexer.getLine());	:}
					| var:v DOT ID:name LPAREN RPAREN				{: RESULT = new AST_EXP_FUNC(v,name,null, lexer.getLine());		:}
					| ID:name LPAREN expList:es RPAREN				{: RESULT = new AST_EXP_FUNC(null,name,es, lexer.getLine());		:}
					| var:v DOT ID:name LPAREN expList:es RPAREN	{: RESULT = new AST_EXP_FUNC(v,name,es, lexer.getLine());		:}
					| INT:i											{: RESULT = new AST_EXP_INT(i,1, lexer.getLine());				:}
					| MINUS INT:i									{: RESULT = new AST_EXP_INT(i,-1, lexer.getLine());				:}
					| NIL											{: RESULT = new AST_EXP_NIL();					:}
					| STRING:s										{: RESULT = new AST_EXP_STRING(s, lexer.getLine());				:}
					;

expList     ::=     exp:e                       {:  RESULT = new AST_EXP_LIST(e, null, lexer.getLine()); :}
                    | exp:e COMMA expList:eL    {:  RESULT = new AST_EXP_LIST(e, eL, lexer.getLine());   :}
                    ;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name, lexer.getLine());		:}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName, lexer.getLine()); :}
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e, lexer.getLine());		:}
					;

stmt		::=		varDec:vd                                                   {: RESULT = new AST_STMT_DEC_VAR(vd, lexer.getLine());			:}
                    | var:v ASSIGN exp:e SEMICOLON                              {: RESULT = new AST_STMT_ASSIGN(v,e, lexer.getLine()); 			:}
        			| var:v ASSIGN newExp:ne SEMICOLON                          {: RESULT = new AST_STMT_ASSIGN_NEW(v,ne, lexer.getLine());		:}
					| RETURN SEMICOLON											{: RESULT = new AST_STMT_RETURN(null, lexer.getLine());			:}
					| RETURN exp:e SEMICOLON									{: RESULT = new AST_STMT_RETURN(e, lexer.getLine());				:}
					| IF	LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body, lexer.getLine());			:}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body, lexer.getLine());		:}
					| var:v DOT ID:fieldName LPAREN RPAREN SEMICOLON			{: RESULT = new AST_STMT_FUNC_VAR(v,fieldName, null, lexer.getLine());:}
					| var:v DOT ID:name LPAREN expList:eL RPAREN SEMICOLON		{: RESULT = new AST_STMT_FUNC_VAR(v, name, eL, lexer.getLine());	:}
					| ID:name LPAREN expList:eL RPAREN SEMICOLON		        {: RESULT = new AST_STMT_FUNC_SIMPLE(name, eL, lexer.getLine());	:}
					;


newExp		::=		NEW type:t 							{: RESULT = new AST_NEW_EXP(t, null, lexer.getLine()); 	:}
					| NEW type:t LBRACK exp:e RBRACK	{: RESULT = new AST_NEW_EXP(t, e, lexer.getLine()); 		:}
					;
cField      ::=     varDec:vd       {: RESULT = new AST_C_FIELD(vd, null, lexer.getLine());    :}
                    | funcDec:fd    {: RESULT = new AST_C_FIELD(null, fd, lexer.getLine());   :}
                    ;




